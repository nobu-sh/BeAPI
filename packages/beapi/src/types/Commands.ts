import type { CommandTypes } from '../commands/index'
import type { Player } from '../player'

/**
 * Abstracted type to get all keys of CommandTypes.
 */
export type KeysOfCommandTypes = keyof typeof CommandTypes
/**
 * Abstracted type to get all values of CommandTypes.
 */
export type CommandArgumentTypes = typeof CommandTypes[KeysOfCommandTypes]

/**
 * Optional extra command options.
 */
export interface CommandOptions {
  /**
   * Custom help usage string.
   *
   * One will be auto generated by default.
   */
  usage?: string
  /**
   * Aliases the command can be called by.
   */
  aliases?: string[]
  /**
   * Tags the executor needs to have in order
   * to use this command.
   */
  permissionTags?: string[]
  /**
   * Hide from help list by default.
   */
  hideFromHelp?: boolean
}

/**
 * Object of command arguments.
 * The key will be used as its identifier.
 * The value can be either `CommandType` or `[CommandType, boolean]`.
 * If `boolean` is `true` the argument will be optional.
 *
 * ** Required arguments that come after optional arguments are treated
 * as optional arguments. Required arguments MUST come BEFORE optional arguments.
 */
export interface CommandArguments {
  /**
   * Object of command arguments.
   * The key will be used as its identifier.
   * The value can be either `CommandType` or `[CommandType, boolean]`.
   * If `boolean` is `true` the argument will be optional.
   *
   * ** Required arguments that come after optional arguments are treated
   * as optional arguments. Required arguments MUST come BEFORE optional arguments.
   */
  [key: string]: CommandArgumentTypes | [CommandArgumentTypes, boolean]
}

/**
 * Command partial contains important information on the command
 * most of which is needed for it to work correctly.
 */
export interface CommandPartial<T extends CommandArguments> {
  /**
   * Name of the command.
   */
  name: string
  /**
   * Description of the command.
   */
  description: string
  /**
   * Argument schematic. Used to parse arguments.
   */
  schema: CommandArguments
  /**
   * Callback function called when command is executed
   * and contains all needed information.
   */
  call: CommandCallable<T>
}

/**
 * Type that remaps CommandArguments object to an object
 * with the same keys but values changed to the return types
 * on CommandTypes extract methods.
 */
export type RemapCommandArguments<T extends Record<string, any>> = {
  [key in keyof T]: T[key] extends [CommandArgumentTypes, boolean]
    ? T[key][1] extends true
      ? NonNullable<ReturnType<T[key][0]['extract']>> | undefined | null
      : NonNullable<ReturnType<T[key][0]['extract']>>
    : NonNullable<ReturnType<T[key]['extract']>>
}

/**
 * CommandPartial callback function type.
 */
export type CommandCallable<T extends CommandArguments> = (origin: Player, args: RemapCommandArguments<T>) => void

/**
 * Command entry type. Is CommandOptions and CommandPartial added together.
 */
export type CommandEntry<T extends CommandArguments> = CommandOptions & CommandPartial<T>
